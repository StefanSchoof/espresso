jobs:
- job: node
  pool: Hosted Ubuntu 1604

  steps:
  - task: Docker@1
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'docker hub sschoof'
      command: login

  - bash: ./dockerbuild.sh
    workingDirectory: node
    displayName: 'docker build'
    env:
      PUSH: true
      USECACHEFROM: true

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: node/junit.xml

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/node/coverage/cobertura-coverage.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/node/coverage

  - task: CopyFiles@2
    displayName: 'Copy Files to staging'
    inputs:
      SourceFolder: 'node'
      Contents: |
        docker-compose.yml
        pideploy.sh
      TargetFolder: '$(build.artifactstagingdirectory)/node'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: node'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/node'
      ArtifactName: node

- job: function
  displayName: function
  pool: Hosted Ubuntu 1604

  steps:
  - bash: |
     set -e
     npm ci
     npm run build
     npm run test:ci
     npm run lint
    workingDirectory: func
    displayName: 'Build'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: func/junit.xml

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/func/coverage/cobertura-coverage.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/func/coverage

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: func'
    inputs:
      PathtoPublish: func/dist
      ArtifactName: func

- job: web
  pool: Hosted Ubuntu 1604

  steps:
  - bash: |
     set -e
     npm ci
     npm run build
     npm run test:ci
     npm run lint
    workingDirectory: web
    displayName: 'Build'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: web/junit.xml

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/web/coverage/cobertura-coverage.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/web/coverage

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: web'
    inputs:
      PathtoPublish: web/dist
      ArtifactName: web

- job: deploy
  pool: Hosted Ubuntu 1604

  steps:
  - task: DownloadSecureFile@1
    displayName: 'Download secure file'
    inputs:
      secureFile: 'df843c96-fc0e-409f-b3fd-f5a318bee16b'

  - task: DownloadSecureFile@1
    displayName: 'Download secure file'
    inputs:
      secureFile: 'c93bf295-33c5-4902-bab1-0f0e9f2b5b11'

  - bash: ./plan.sh
    workingDirectory: deploy
    displayName: 'Plan'

  - task: CopyFiles@2
    displayName: 'Copy Files to staging'
    inputs:
      SourceFolder: 'deploy'
      Contents: |
        *.tf
        *.sh
        cloud-config.txt
        !plan.sh
      TargetFolder: '$(build.artifactstagingdirectory)/terraform'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: deploy'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/terraform'
      ArtifactName: deploy

- job: e2etest
  pool: Hosted Ubuntu 1604

  steps:
  - bash: |
     set -e
     npm ci
     npm run build
     npm run lint
    workingDirectory: e2etest
    displayName: 'Build'

  - task: CopyFiles@2
    displayName: 'Copy Files to staging'
    inputs:
      SourceFolder: 'e2etest'
      Contents: |
        package*.json
        src/test.ts
        .babelrc.js
      TargetFolder: '$(build.artifactstagingdirectory)/e2etest'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: e2etest'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/e2etest'
      ArtifactName: e2etest
