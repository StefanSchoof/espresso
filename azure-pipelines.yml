stages:
- stage: Build
  jobs:
  - job: node
    pool: Hosted Ubuntu 1604

    steps:
    - task: Docker@1
      displayName: 'docker login'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'docker hub sschoof'
        command: login

    - bash: ./enablecrosscompile.sh
      workingDirectory: node
      displayName: 'enable cross compile'

    - bash: ./startbuildkitd.sh
      workingDirectory: node
      displayName: 'start buildkitd'

    - bash: ./dockerbuild.sh
      workingDirectory: node
      displayName: 'docker build'
      env:
        BUILDKIT_HOST: tcp://0.0.0.0:1234

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: node/junit.xml

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: node/coverage/cobertura-coverage.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: node
        targetPath: node

  - job: function
    displayName: function
    pool: Hosted Ubuntu 1604

    steps:
    - bash: |
        set -e
        npm ci
        npm run build
        npm run test:ci
        npm run lint
      workingDirectory: func
      displayName: 'Build'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: func/junit.xml

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: func/coverage/cobertura-coverage.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: func
        targetPath: func/dist

  - job: web
    pool: Hosted Ubuntu 1604

    steps:
    - bash: |
        set -e
        npm ci
        npm run build
        npm run test:ci
        npm run lint
      workingDirectory: web
      displayName: 'Build'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: web/junit.xml

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: web/coverage/cobertura-coverage.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: web
        targetPath: web/dist

  - job: deploy
    pool: Hosted Ubuntu 1604

    steps:
    - task: DownloadSecureFile@1
      displayName: 'Download secure file'
      inputs:
        secureFile: 'df843c96-fc0e-409f-b3fd-f5a318bee16b'

    - task: DownloadSecureFile@1
      displayName: 'Download secure file'
      inputs:
        secureFile: 'c93bf295-33c5-4902-bab1-0f0e9f2b5b11'

    - bash: ./plan.sh
      workingDirectory: deploy
      displayName: 'Plan'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: deploy
        targetPath: deploy

  - job: e2etest
    pool: Hosted Ubuntu 1604

    steps:
    - bash: |
        set -e
        npm ci
        npm run build
        npm run lint
      workingDirectory: e2etest
      displayName: 'Build'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: e2etest
        targetPath: e2etest

- stage: Deploy
  jobs:
  - deployment: deploy
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: 'Download secure file'
            inputs:
              secureFile: 'df843c96-fc0e-409f-b3fd-f5a318bee16b'
          - task: DownloadSecureFile@1
            displayName: 'Download secure file'
            inputs:
              secureFile: 'c93bf295-33c5-4902-bab1-0f0e9f2b5b11'
          - task: AzureCLI@1
            displayName: 'Infrastructure as Code'
            inputs:
              azureSubscription: 'Visual Studio Premium mit MSDN'
              scriptPath: 'deploy/iac.sh'
              workingDirectory: 'deploy'
          - task: AzureCLI@1
            displayName: deploy
            inputs:
              azureSubscription: 'Visual Studio Premium mit MSDN'
              scriptPath: 'deploy/deploy.sh'
              workingDirectory: 'deploy'
  - deployment: container
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: AzureKeyVault@1
            displayName: 'Azure Key Vault: espresso-global'
            inputs:
              azureSubscription: 'Visual Studio Premium mit MSDN'
              KeyVaultName: 'espresso-global'
          - task: CopyFilesOverSSH@0
            displayName: 'Securely copy files to the remote machine'
            inputs:
              sshEndpoint: dockerhost
              sourceFolder: '_StefanSchoof.espresso/node'
              contents: 'docker-compose.yml'
              targetFolder: espresso
          - task: SSH@0
            displayName: 'Run shell script on remote machine'
            inputs:
              sshEndpoint: dockerhost
              runOptions: script
              scriptPath: '_StefanSchoof.espresso/node/pideploy.sh'
              args: '"$(DeviceConnectionString)" "$(NodeInstrumentationKey)" "$(Build.BuildId)" "echo"'
  - deployment: e2etest
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: AzureKeyVault@1
            displayName: 'Azure Key Vault: espresso-global'
            inputs:
              azureSubscription: 'Visual Studio Premium mit MSDN'
              KeyVaultName: 'espresso-global'
          - powershell: '$env:testurl = $(Website URL)'
            displayName: 'Set Testurl'
          - task: Npm@1
            displayName: 'npm install --production'
            inputs:
              command: custom
              workingDir: '_StefanSchoof.espresso/e2etest'
              verbose: false
              customCommand: 'install --production'
          - task: Npm@1
            displayName: e2etest
            inputs:
              command: custom
              workingDir: '_StefanSchoof.espresso/e2etest'
              verbose: false
              customCommand: start
          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/junit.xml'
            inputs:
              testResultsFiles: '**/junit.xml'
            condition: succeededOrFailed()
  - deployment: destroy
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: DownloadSecureFile@1
            displayName: 'Download secure file'
            inputs:
              secureFile: 'df843c96-fc0e-409f-b3fd-f5a318bee16b'
          - task: DownloadSecureFile@1
            displayName: 'Download secure file'
            inputs:
              secureFile: 'c93bf295-33c5-4902-bab1-0f0e9f2b5b11'
          - task: Bash@3
            displayName: 'Bash Script'
            inputs:
              targetType: filePath
              filePath: '_StefanSchoof.espresso/deploy/destroy.sh'
              workingDirectory: '_StefanSchoof.espresso/deploy'
