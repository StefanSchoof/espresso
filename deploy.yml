parameters:
  environment: test
  sshEndpoint: dockerhost
  test: false
  containerPool: Hosted Ubuntu 1604
  dockerTag: dev
  testingCmd: echo

jobs:
- deployment: deploy
  environment: ${{ parameters.environment }}
  pool: Hosted Ubuntu 1604
  variables:
    KEYVAULTNAME: 'espresso-global'
    RELEASE_ENVIRONMENTNAME: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - task: Docker@1
          displayName: pull
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'docker hub sschoof'
            command: pull
            arguments: 'stefanschoof/espresso:build$(Build.BuildId)'
        - bash: 'docker tag stefanschoof/espresso:build$(Build.BuildId) stefanschoof/espresso:${{ parameters.dockerTag }}'
          displayName: 'Tag image'
        - task: Docker@1
          displayName: 'Push an image'
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'docker hub sschoof'
            command: 'Push an image'
            imageName: 'stefanschoof/espresso:${{ parameters.dockerTag }}'
        - task: Bash@3
          displayName: 'Install terraform'
          inputs:
            filePath: ../deploy/installterraform.sh
            workingDirectory: ../deploy
        - task: AzureCLI@1
          displayName: 'Infrastructure as Code'
          inputs:
            azureSubscription: 'Visual Studio Premium mit MSDN'
            scriptPath: '../deploy/apply.sh'
            workingDirectory: '../deploy'
            addSpnToEnvironment: true
        - bash: echo "##vso[task.setvariable variable=WebsiteUrl;isOutput=true]$(terraform output static-web-url)"
          workingDirectory: '../deploy'
          name: websiteUrl
- deployment: container
  environment: ${{ parameters.environment }}
  dependsOn: deploy
  pool: ${{ parameters.containerPool }}
  strategy:
    runOnce:
      deploy:
        steps:
        - task: AzureKeyVault@1
          displayName: 'Azure Key Vault: espresso-global'
          inputs:
            azureSubscription: 'Visual Studio Premium mit MSDN'
            KeyVaultName: 'espresso-global'
        - task: CopyFilesOverSSH@0
          displayName: 'Securely copy files to the remote machine'
          inputs:
            sshEndpoint: ${{ parameters.sshEndpoint }}
            sourceFolder: '../node'
            contents: 'docker-compose.yml'
            targetFolder: espresso
        - task: SSH@0
          displayName: 'Update docker'
          inputs:
            sshEndpoint: ${{ parameters.sshEndpoint }}
            runOptions: script
            scriptPath: '../node/pideploy.sh'
            args: '"$(DeviceConnectionString)" "$(NodeInstrumentationKey)" "$(Build.BuildId)" "${{ parameters.testingCmd }}"'
- ${{ if eq(parameters.test, 'true') }}:
  - deployment: e2etest
    environment: ${{ parameters.environment }}
    pool: Hosted VS2017
    variables:
      WebsiteUrl: $[ dependencies.deploy.outputs['websiteUrl.WebsiteUrl'] ]
    dependsOn: container
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
          - bash: printenv | sort
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: e2etest
              downloadPath: .
          - task: AzureKeyVault@1
            displayName: 'Azure Key Vault: espresso-global'
            inputs:
              azureSubscription: 'Visual Studio Premium mit MSDN'
              KeyVaultName: 'espresso-global'
          - task: Npm@1
            displayName: 'npm ci --production'
            inputs:
              command: custom
              customCommand: 'ci --production'
          - task: Npm@1
            displayName: e2etest
            inputs:
              command: custom
              customCommand: start
          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/junit.xml'
            inputs:
              testResultsFiles: 'junit.xml'
            condition: succeededOrFailed()
  - deployment: destroy
    environment: ${{ parameters.environment }}
    dependsOn: e2etest
    pool: Hosted Ubuntu 1604
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install terraform'
            inputs:
              filePath: ../deploy/installterraform.sh
              workingDirectory: ../deploy
          - task: AzureCLI@1
            displayName: 'destroy'
            inputs:
              azureSubscription: 'Visual Studio Premium mit MSDN'
              scriptPath: '../deploy/destroy.sh'
              workingDirectory: '../deploy'
              addSpnToEnvironment: true
