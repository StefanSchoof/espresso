parameters:
  environment: test
  sshEndpoint: dockerhost
  test: false
  containerPoolName: Azure Pipelines
  containerPoolVmImage: ''
  dockerTag: dev
  testingCmd: echo

jobs:
- job: deploy
  pool:
    vmImage: ubuntu-18.04
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: deploy
      path: deploy
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: web
      path: web
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: func
      path: func
  - task: Docker@1
    displayName: pull
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'docker hub sschoof'
      command: pull
      arguments: 'stefanschoof/espresso:build$(Build.BuildId)'
  - bash: 'docker tag stefanschoof/espresso:build$(Build.BuildId) stefanschoof/espresso:${{ parameters.dockerTag }}'
    displayName: 'Tag image'
  - task: Docker@1
    displayName: 'Push an image'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'docker hub sschoof'
      command: 'Push an image'
      imageName: 'stefanschoof/espresso:${{ parameters.dockerTag }}'
  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: $(TERRAFORM_VERSION)
  - task: TerraformTaskV1@0
    displayName: 'Terraform init'
    inputs:
      workingDirectory: deploy
      backendServiceArm: 'Visual Studio Premium mit MSDN'
      backendAzureRmResourceGroupName: espresso-tfstate
      backendAzureRmStorageAccountName: espressotfstate${{ parameters.environment }}
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: terraform.tfstate
  - task: TerraformTaskV1@0
    displayName: 'Terraform apply'
    name: terrafromApply
    inputs:
      command: apply
      commandOptions: -var-file="${{ parameters.environment }}.tfvars" -lock-timeout=10m
      workingDirectory: deploy
      environmentServiceNameAzureRM: 'Visual Studio Premium mit MSDN'
  - task: PowerShell@2
    displayName: 'terraform output to devops'
    name: terraformOutput${{ parameters.environment }}
    inputs:
      filePath: 'deploy/output.ps1'
      workingDirectory: 'deploy'
    env:
      jsonPath: $(terrafromApply.jsonOutputVariablesPath)
  - task: AzureCLI@1
    displayName: 'Deploy'
    inputs:
      azureSubscription: 'Visual Studio Premium mit MSDN'
      scriptPath: 'deploy/deploy.sh'
      workingDirectory: 'deploy'
    env:
      AZURERM_APPLICATION_INSIGHTS_WEB: $(terraformOutput${{ parameters.environment }}.azurerm_application_insights_web)
      FUNCTION_APP: $(terraformOutput${{ parameters.environment }}.function_app)
      FUNCTION_APP_HOSTNAME: $(terraformOutput${{ parameters.environment }}.function_app_hostname)
      STORAGE_ACCOUNT: $(terraformOutput${{ parameters.environment }}.storage_account)
- job: container
  dependsOn: deploy
  pool:
    name: ${{ parameters.containerPoolName }}
    vmImage: ${{ parameters.containerPoolVmImage }}
  variables:
    DeviceConnectionString: $[ dependencies.deploy.outputs['terraformOutput${{ parameters.environment }}.iot_device_connection_string'] ]
    NodeInstrumentationKey: $[ dependencies.deploy.outputs['terraformOutput${{ parameters.environment }}.azurerm_application_insights_node'] ]
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: node
      path: .
  - task: CopyFilesOverSSH@0
    displayName: 'Securely copy files to the remote machine'
    inputs:
      sshEndpoint: ${{ parameters.sshEndpoint }}
      contents: 'docker-compose.yml'
      targetFolder: espresso
  - task: SSH@0
    displayName: 'Update docker'
    inputs:
      sshEndpoint: ${{ parameters.sshEndpoint }}
      runOptions: script
      scriptPath: 'pideploy.sh'
      args: '"$(DeviceConnectionString)" "$(NodeInstrumentationKey)" "$(Build.BuildId)" "${{ parameters.testingCmd }}"'
- ${{ if eq(parameters.test, 'true') }}:
  - job: e2etest
    pool: Hosted VS2017
    dependsOn: container
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: e2etest
        path: .
    - task: Npm@1
      displayName: 'npm ci --production'
      inputs:
        command: custom
        customCommand: 'ci --production'
    - task: Npm@1
      displayName: e2etest
      inputs:
        command: custom
        customCommand: start
    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/junit.xml'
      inputs:
        testResultsFiles: 'junit.xml'
      condition: succeededOrFailed()
  - job: destroy
    dependsOn: e2etest
    pool:
      vmImage: ubuntu-18.04
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: deploy
        path: .
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(TERRAFORM_VERSION)
    - task: TerraformTaskV1@0
      displayName: 'Terraform init'
      inputs:
        backendServiceArm: 'Visual Studio Premium mit MSDN'
        backendAzureRmResourceGroupName: espresso-tfstate
        backendAzureRmStorageAccountName: espressotfstate${{ parameters.environment }}
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: terraform.tfstate
    # destroy costly resouces in test
    - task: TerraformTaskV1@0
      displayName: 'Terraform destroy'
      inputs:
        command: destroy
        commandOptions: -var-file="test.tfvars" -target azurerm_virtual_machine.dockerhost -target azurerm_iothub.iothub
        environmentServiceNameAzureRM: 'Visual Studio Premium mit MSDN'
